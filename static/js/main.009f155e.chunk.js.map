{"version":3,"sources":["components/Buttons/Buttons.js","App.js","reportWebVitals.js","index.js"],"names":["Buttons","setTime","timerOn","setTimerOn","changeTimerStatus","timerStatus","onClick","App","useState","time","useEffect","intervalId","setInterval","pervTime","clearInterval","className","getSeconds","slice","minutes","Math","floor","getMinutes","getHours","formatTime","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"sNAEe,SAASA,EAAT,GAAoD,IAAjCC,EAAgC,EAAhCA,QAASC,EAAuB,EAAvBA,QAASC,EAAc,EAAdA,WAC5CC,EAAoB,SAACC,GACzBF,EAAWE,IAGb,OACE,gCACIH,EAGA,wBAAQI,QAAS,kBAAMF,GAAkB,IAAzC,kBAFA,wBAAQE,QAAS,kBAAMF,GAAkB,IAAzC,mBAKF,wBAAQE,QAAS,kBAAMF,GAAkB,IAAzC,kBACA,wBAAQE,QAAS,kBAAML,EAAQ,IAA/B,sBCsBSM,MAlCf,WACE,MAAwBC,mBAAS,GAAjC,mBAAOC,EAAP,KAAaR,EAAb,KACA,EAA8BO,oBAAS,GAAvC,mBAAON,EAAP,KAAgBC,EAAhB,KAsBA,OApBAO,qBAAU,WACR,IAAIC,EAAa,KAQjB,OAPIT,EACFS,EAAaC,aAAY,WACvBX,GAAQ,SAACY,GAAD,OAAcA,EAAW,OAChC,KAEHC,cAAcH,GAET,kBAAMG,cAAcH,MAC1B,CAACT,IAWF,sBAAKa,UAAU,MAAf,UACE,8BACE,+BAXa,WACjB,IAAMC,EAAa,WAAIP,EAAO,IAAKQ,OAAO,GACpCC,EAAO,UAAMC,KAAKC,MAAMX,EAAO,KAC/BY,EAAa,WAAIH,EAAU,IAAKD,OAAO,GACvCK,EAAW,WAAIH,KAAKC,MAAMX,EAAO,OAAQQ,OAAO,GAEtD,MAAM,GAAN,OAAUK,EAAV,cAAwBD,EAAxB,cAAwCL,GAK7BO,OAET,cAACvB,EAAD,CAASC,QAASA,EAASC,QAASA,EAASC,WAAYA,QCrBhDqB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,K","file":"static/js/main.009f155e.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nexport default function Buttons({ setTime, timerOn, setTimerOn }) {\r\n  const changeTimerStatus = (timerStatus) => {\r\n    setTimerOn(timerStatus);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      {!timerOn ? (\r\n        <button onClick={() => changeTimerStatus(true)}>Start</button>\r\n      ) : (\r\n        <button onClick={() => changeTimerStatus(false)}>Stop</button>\r\n      )}\r\n\r\n      <button onClick={() => changeTimerStatus(true)}>Wait</button>\r\n      <button onClick={() => setTime(0)}>Reset</button>\r\n    </div>\r\n  );\r\n}\r\n","import { useState, useEffect } from \"react\";\nimport \"./App.css\";\nimport Buttons from \"./components/Buttons\";\n\nfunction App() {\n  const [time, setTime] = useState(0);\n  const [timerOn, setTimerOn] = useState(false);\n\n  useEffect(() => {\n    let intervalId = null;\n    if (timerOn) {\n      intervalId = setInterval(() => {\n        setTime((pervTime) => pervTime + 1);\n      }, 1000);\n    } else {\n      clearInterval(intervalId);\n    }\n    return () => clearInterval(intervalId);\n  }, [timerOn]);\n\n  const formatTime = () => {\n    const getSeconds = `0${time % 60}`.slice(-2);\n    const minutes = `${Math.floor(time / 60)}`;\n    const getMinutes = `0${minutes % 60}`.slice(-2);\n    const getHours = `0${Math.floor(time / 3600)}`.slice(-2);\n\n    return `${getHours} : ${getMinutes} : ${getSeconds}`;\n  };\n  return (\n    <div className=\"App\">\n      <div>\n        <span>{formatTime()}</span>\n      </div>\n      <Buttons setTime={setTime} timerOn={timerOn} setTimerOn={setTimerOn} />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}