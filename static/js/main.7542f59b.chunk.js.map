{"version":3,"sources":["components/Buttons/Buttons.js","components/Display/Display.js","App.js","reportWebVitals.js","index.js"],"names":["Buttons","setTime","timerOn","setTimerOn","changeTimerStatus","timerStatus","onClick","onDoubleClick","debounceTime","Display","time","getSeconds","slice","minutes","Math","floor","getMinutes","getHours","formatTime","App","useState","useEffect","unsubscribe$","Subject","interval","pipe","takeUntil","subscribe","pervTime","next","complete","className","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"sPAGe,SAASA,EAAT,GAAoD,IAAjCC,EAAgC,EAAhCA,QAASC,EAAuB,EAAvBA,QAASC,EAAc,EAAdA,WAC5CC,EAAoB,SAACC,GACzBF,EAAWE,IAoBb,OACE,gCACIH,EAGA,wBAAQI,QAlBD,WACXF,GAAkB,GAClBH,EAAQ,IAgBJ,kBAFA,wBAAQK,QApBA,WACZF,GAAkB,IAmBd,mBAKF,wBAAQG,cAhBC,WACXC,YAAaJ,GAAkB,GAAQ,MAerC,kBACA,wBAAQE,QAbE,WACZL,EAAQ,IAYN,sBChCS,SAASQ,EAAT,GAA4B,IAATC,EAAQ,EAARA,KAShC,OACE,8BACE,+BAVe,WACjB,IAAMC,EAAa,WAAID,EAAO,IAAKE,OAAO,GACpCC,EAAO,UAAMC,KAAKC,MAAML,EAAO,KAC/BM,EAAa,WAAIH,EAAU,IAAKD,OAAO,GACvCK,EAAW,WAAIH,KAAKC,MAAML,EAAO,OAAQE,OAAO,GAEtD,MAAM,GAAN,OAAUK,EAAV,cAAwBD,EAAxB,cAAwCL,GAI/BO,O,4BCiCEC,MAvCf,WACE,MAAwBC,mBAAS,GAAjC,mBAAOV,EAAP,KAAaT,EAAb,KACA,EAA8BmB,oBAAS,GAAvC,mBAAOlB,EAAP,KAAgBC,EAAhB,KA6BA,OA3BAkB,qBAAU,WACR,IAAMC,EAAe,IAAIC,IAQzB,OAPAC,YAAS,KACNC,KAAKC,YAAUJ,IACfK,WAAU,WACLzB,GACFD,GAAQ,SAAC2B,GAAD,OAAcA,EAAW,QAGhC,WACLN,EAAaO,OACbP,EAAaQ,cAEd,CAAC5B,IAeF,sBAAK6B,UAAU,MAAf,UACE,cAACtB,EAAD,CAASC,KAAMA,IACf,cAACV,EAAD,CAASC,QAASA,EAASC,QAASA,EAASC,WAAYA,QC7BhD6B,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.7542f59b.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { debounceTime } from \"rxjs\";\r\n\r\nexport default function Buttons({ setTime, timerOn, setTimerOn }) {\r\n  const changeTimerStatus = (timerStatus) => {\r\n    setTimerOn(timerStatus);\r\n  };\r\n\r\n  const start = () => {\r\n    changeTimerStatus(true);\r\n  };\r\n\r\n  const stop = () => {\r\n    changeTimerStatus(false);\r\n    setTime(0);\r\n  };\r\n\r\n  const wait = () => {\r\n    debounceTime(changeTimerStatus(false), 300);\r\n  };\r\n\r\n  const reset = () => {\r\n    setTime(0);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      {!timerOn ? (\r\n        <button onClick={start}>Start</button>\r\n      ) : (\r\n        <button onClick={stop}>Stop</button>\r\n      )}\r\n\r\n      <button onDoubleClick={wait}>Wait</button>\r\n      <button onClick={reset}>Reset</button>\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\r\n\r\nexport default function Display({ time }) {\r\n  const formatTime = () => {\r\n    const getSeconds = `0${time % 60}`.slice(-2);\r\n    const minutes = `${Math.floor(time / 60)}`;\r\n    const getMinutes = `0${minutes % 60}`.slice(-2);\r\n    const getHours = `0${Math.floor(time / 3600)}`.slice(-2);\r\n\r\n    return `${getHours} : ${getMinutes} : ${getSeconds}`;\r\n  };\r\n  return (\r\n    <div>\r\n      <span>{formatTime()}</span>\r\n    </div>\r\n  );\r\n}\r\n","import { useState, useEffect } from \"react\";\nimport \"./App.css\";\nimport Buttons from \"./components/Buttons\";\nimport Display from \"./components/Display\";\nimport { interval, Subject } from \"rxjs\";\nimport { takeUntil } from \"rxjs/operators\";\n\nfunction App() {\n  const [time, setTime] = useState(0);\n  const [timerOn, setTimerOn] = useState(false);\n\n  useEffect(() => {\n    const unsubscribe$ = new Subject();\n    interval(1000)\n      .pipe(takeUntil(unsubscribe$))\n      .subscribe(() => {\n        if (timerOn) {\n          setTime((pervTime) => pervTime + 1);\n        }\n      });\n    return () => {\n      unsubscribe$.next();\n      unsubscribe$.complete();\n    };\n  }, [timerOn]);\n\n  // useEffect(() => {\n  //   let intervalId = null;\n  //   if (timerOn) {\n  //     intervalId = setInterval(() => {\n  //       setTime((pervTime) => pervTime + 1);\n  //     }, 1000);\n  //   } else {\n  //     clearInterval(intervalId);\n  //   }\n  //   return () => clearInterval(intervalId);\n  // }, [timerOn]);\n\n  return (\n    <div className=\"App\">\n      <Display time={time} />\n      <Buttons setTime={setTime} timerOn={timerOn} setTimerOn={setTimerOn} />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}